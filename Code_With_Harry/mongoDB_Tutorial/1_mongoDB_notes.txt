-mongoDB is document base Database (i.e it stores data in form of document files) which is build in taking care of scalability and flexibility.
- TO use mongoDB We need to make clusture in the machine i.e we need to configure mongoDB in the machine in  which we are using it.
- When we use managed mongoDB enviroment in that clusture and mongoDB is already installed in it.
- We create Database  inside clusture once after clusture is installed
- inside Database we create collections.

Relational DB Vs mongoDB
1.Database       1.Database
2.Table          2. collections
3. Row           3. document
4. column        4. field


Database k andar collections k andar document k andar field

- mongoDB community server woh application h jo mongoDB database k andar sara k sara data manage update retrieve krne k kaam kregi 
- mongod --help 
-After installing mongoDB we need to let mongo know the db path by using mongod --dbpath  <path to db>

C:\Users\rkgupta>mkdir db

C:\Users\rkgupta>mongod --dbpath C:\Users\rkgupta\db

- mongod is a core mongoDB process to run mongoDB Server.

- mongod compass is the GUI for mongoDB
-Since mongoDB is NoSQL type database i.e There is no need to have same schema of 2 documents.
-Each document can have it's own key:value pair in Object



######## CRUD Operation in mongoDB ##############
********* IMPORTANT ******* 
The below all commands are onle work in mongoDB shell. commands differ from each languages to use mongDB database for eg- In python and Java and other languages commands will differ.

show dbs -> cmd to show the database in the current server 
use <database name> -> to switch into the database

1. Create 

use Employee
db refers to current database in which we are 

db.collections.insertOne() -> Insert only one document in the collection
Eg- db.inventory.insertOne({item:"canvas" , qty:"100" , tags:["cotton"] , size:{h:28,w:35 , uom:"cm"}}); // In current db, in which inventory is the collection add one entry in it.

db.collection.insertMany() -> to insert multiple item at a time 

Eg-  
db.inventory.insertMany(
    [
    {item:"canvas" , qty:"100" , tags:["cotton"] , size:{h:28,w:35 , uom:"cm"}},
    {item:"canvas" , qty:"100" , tags:["copper"] , size:{h:28,w:35 , uom:"cm"}},
    {item:"canvas" , qty:"100" , tags:["Zinc"] , size:{h:28,w:35 , uom:"cm"}},
    {item:"canvas" , qty:"100" , tags:["Aluminium"] , size:{h:28,w:35 , uom:"cm"}}
    ]
)


2. Read using find() method 

find() function is used to read data

db.inventory.find() --> query to fetch all document in current collection    similar to SELECT * FROM inventory in SQL
db.inventory.find({}) --> query to fetch all document in current collection
db.inventory.find({qty:"90"}) -> returns that document which has qty is 90
db.inventory.find({"qty":"90"}) -> returns that document which has qty is 90
db.inventory.find({qty:90}) -> returns that document which has qty is 90
db.inventory.find({"qty":90}) -> returns that document which has qty is 90
db.inventory.find({tags:["Zinc"]})

db.inventory.find({tags: {$in : ["red","D"] }})-> return all those document which has red or D in their tags value
db.inventory.find({tags: {$in : ["cotton","Zinc"] }})

db.inventory.find( { status: "D" } )  --> This operation uses a filter predicate of { status: "D" }, which corresponds to the following SQL statement:
db.inventory.find( { status: { $in: [ "A", "D" ] } } ) --> The operation uses a filter predicate of { status: { $in: [ "A", "D" ] } }, which corresponds to the following SQL statement:   In SQL SELECT * FROM inventory WHERE status in ("A", "D") 

- Specify AND Conditions  We don't need to mention AND operator explicitely 

db.inventory.find( { status: "A", qty: { $lt: 30 } } ) --> The operation uses a filter predicate of { status: "A", qty: { $lt: 30 } }, which corresponds to the following SQL statement: In SQL SELECT * FROM inventory WHERE status = "A" AND qty < 30

- Specify OR Conditions 
db.inventory.find( { $or: [ { status: "A" }, { qty: { $lt: 30 } } ] } ) --> The operation uses a filter predicate of { $or: [ { status: 'A' }, { qty: { $lt: 30 } } ] }, which corresponds to the following SQL statement: In SQL SELECT * FROM inventory WHERE status = "A" OR qty < 30

- Specify AND as well as OR Conditions

db.inventory.find( {
     status: "A",
     $or: [ { qty: { $lt: 30 } }, { item: /^p/ } ]
} )

The operation uses a filter predicate of:

{
   status: 'A',
   $or: [
     { qty: { $lt: 30 } }, { item: { $regex: '^p' } }
   ]
}

which corresponds to the following SQL statement:

SELECT * FROM inventory WHERE status = "A" AND ( qty < 30 OR item LIKE "p%")

 
- findOne

db.inventory.findOne({status :{$in: ["A","D"]}}) --> returns a document






3. Update 
MongoDB provides the following methods for updating documents in a collection:

db.collection.updateOne()
Updates at most a single document that match a specified filter even though multiple documents may match the specified filter.

db.collection.updateMany()
Update all documents that match a specified filter.

db.collection.replaceOne()
Replaces at most a single document that match a specified filter even though multiple documents may match the specified filter.


- updateOne with $set

Create an example students collection (if the collection does not currently exist, insert operations will create the collection):

db.students.insertMany( [
   { _id: 1, test1: 95, test2: 92, test3: 90, modified: new Date("01/05/2020") },
   { _id: 2, test1: 98, test2: 100, test3: 102, modified: new Date("01/05/2020") },
   { _id: 3, test1: 95, test2: 110, modified: new Date("01/04/2020") }
] )

Create an example students collection (if the collection does not currently exist, insert operations will create the collection):
db.students.updateOne( { _id: 3 }, [ { $set: { "test3": 98, modified: "$$NOW"} } ] )

Specifically, the pipeline consists of a $set stage which adds the test3 field (and sets its value to 98) to the document and sets the modified field to the current datetime. The operation uses the aggregation variable NOW for the current datetime. To access the variable, prefix with $$ and enclose in quotes.
To verify the update, you can query the collection:

db.students.find().pretty()

- updateMany with $replaceRoot and $set
Create an example students2 collection (if the collection does not currently exist, insert operations will create the collection):
db.students2.insertMany( [
   { "_id" : 1, quiz1: 8, test2: 100, quiz2: 9, modified: new Date("01/05/2020") },
   { "_id" : 2, quiz2: 5, test1: 80, test2: 89, modified: new Date("01/05/2020") },
] )

The following db.collection.updateMany() operation uses an aggregation pipeline to standardize the fields for the documents (i.e. documents in the collection should have the same fields) and update the modified field:
db.students2.updateMany( {},
  [
    { $replaceRoot: { newRoot:
       { $mergeObjects: [ { quiz1: 0, quiz2: 0, test1: 0, test2: 0 }, "$$ROOT" ] }
    } },
    { $set: { modified: "$$NOW"}  }
  ]
)
Specifically, the pipeline consists of:

a $replaceRoot stage with a $mergeObjects expression to set default values for the quiz1, quiz2, test1 and test2 fields. The aggregation variable ROOT refers to the current document being modified. To access the variable, prefix with $$ and enclose in quotes. The current document fields will override the default values.

a $set stage to update the modified field to the current datetime. The operation uses the aggregation variable NOW for the current datetime. To access the variable, prefix with $$ and enclose in quotes.

- updateMany with $set
Create an example students3 collection (if the collection does not currently exist, insert operations will create the collection):
db.students3.insertMany( [
   { "_id" : 1, "tests" : [ 95, 92, 90 ], "modified" : ISODate("2019-01-01T00:00:00Z") },
   { "_id" : 2, "tests" : [ 94, 88, 90 ], "modified" : ISODate("2019-01-01T00:00:00Z") },
   { "_id" : 3, "tests" : [ 70, 75, 82 ], "modified" : ISODate("2019-01-01T00:00:00Z") }
] );

The following db.collection.updateMany() operation uses an aggregation pipeline to update the documents with the calculated grade average and letter grade.
db.students3.updateMany(
   { },
   [
     { $set: { average : { $trunc: [ { $avg: "$tests" }, 0 ] }, modified: "$$NOW" } },
     { $set: { grade: { $switch: {
                           branches: [
                               { case: { $gte: [ "$average", 90 ] }, then: "A" },
                               { case: { $gte: [ "$average", 80 ] }, then: "B" },
                               { case: { $gte: [ "$average", 70 ] }, then: "C" },
                               { case: { $gte: [ "$average", 60 ] }, then: "D" }
                           ],
                           default: "F"
     } } } }
   ]
)

Specifically, the pipeline consists of:

a $set stage to calculate the truncated average value of the tests array elements and to update the modified field to the current datetime. To calculate the truncated average, the stage uses the $avg and $trunc expressions. The operation uses the aggregation variable NOW for the current datetime. To access the variable, prefix with $$ and enclose in quotes.

a $set stage to add the grade field based on the average using the $switch expression.

-updateOne with $set
Create an example students4 collection (if the collection does not currently exist, insert operations will create the collection):
db.students4.insertMany( [
  { "_id" : 1, "quizzes" : [ 4, 6, 7 ] },
  { "_id" : 2, "quizzes" : [ 5 ] },
  { "_id" : 3, "quizzes" : [ 10, 10, 10 ] }
] )
The following db.collection.updateOne() operation uses an aggregation pipeline to add quiz scores to the document with _id: 2:
db.students4.updateOne( { _id: 2 },
  [ { $set: { quizzes: { $concatArrays: [ "$quizzes", [ 8, 6 ]  ] } } } ]
)

- updateMany with $addFields
Create an example temperatures collection that contains temperatures in Celsius (if the collection does not currently exist, insert operations will create the collection):
db.temperatures.insertMany( [
  { "_id" : 1, "date" : ISODate("2019-06-23"), "tempsC" : [ 4, 12, 17 ] },
  { "_id" : 2, "date" : ISODate("2019-07-07"), "tempsC" : [ 14, 24, 11 ] },
  { "_id" : 3, "date" : ISODate("2019-10-30"), "tempsC" : [ 18, 6, 8 ] }
] )
The following db.collection.updateMany() operation uses an aggregation pipeline to update the documents with the corresponding temperatures in Fahrenheit:
db.temperatures.updateMany( { },
  [
    { $addFields: { "tempsF": {
          $map: {
             input: "$tempsC",
             as: "celsius",
             in: { $add: [ { $multiply: ["$$celsius", 9/5 ] }, 32 ] }
          }
    } } }
  ]
)
Specifically, the pipeline consists of an $addFields stage to add a new array field tempsF that contains the temperatures in Fahrenheit. To convert each celsius temperature in the tempsC array to Fahrenheit, the stage uses the $map expression with $add and $multiply expressions.

4. Delete 
MongoDB provides the following methods to delete documents of a collection:

db.collection.deleteOne()
Delete at most a single document that match a specified filter even though multiple documents may match the specified filter.
db.collection.deleteMany()
Delete all documents that match a specified filter.
db.collection.remove()
Delete a single document or all documents that match a specified filter.


db.inventory.deleteMany({}) -> The method returns a document with the status of the operation

Delete All Documents that Match a Condition
You can specify criteria, or filters, that identify the documents to delete. The filters use the same syntax as read operations.

To specify equality conditions, use <field>:<value> expressions in the query filter document:

{ <field1>: <value1>, ... }



A query filter document can use the query operators to specify conditions in the following form:

{ <field1>: { <operator1>: <value1> }, ... }



To delete all documents that match a deletion criteria, pass a filter parameter to the deleteMany() method.

The following example removes all documents from the inventory collection where the status field equals "A":

db.inventory.deleteMany({ status : "A" })



The method returns a document with the status of the operation. For more information and examples, see deleteMany().

- Delete Only One Document that Matches a Condition
db.inventory.deleteOne( { status: "D" } )


########## SORT DATA #############
- db.inventory.find()  -> returns whole documents in collection
- db.inventory.find().limit(1) -> returns first document in collection
- db.inventory.find().limit(2) -> returns first two document in collection
- db.inventory.find().skip(1) -> first document is skipped rest is returned
- db.inventory.find().skip(2) -> first two  document is skipped rest is returned
- db.inventory.find().sort({qty:1}) --> sort data in increasing order based on qty value
- db.inventory.find().sort({qty:-1}) --> sort data in decreasing order based on qty value

Achieving Pagination using mongDB find and limit method
pageNo 1 to 10
Num = no of blogs per page
  
- db.blogs.find().skip((pageNo-1)*Num).limit(Num).sort({"":1})


####### mongoDB Operators ###########
Query and Projection operators


Name
Description
$eq
Matches values that are equal to a specified value.
$gt
Matches values that are greater than a specified value.
$gte
Matches values that are greater than or equal to a specified value.
$in
Matches any of the values specified in an array.
$lt
Matches values that are less than a specified value.
$lte
Matches values that are less than or equal to a specified value.
$ne
Matches all values that are not equal to a specified value.
$nin
Matches none of the values specified in an array.
Logical
Name
Description
$and
Joins query clauses with a logical AND returns all documents that match the conditions of both clauses.
$not
Inverts the effect of a query expression and returns documents that do not match the query expression.
$nor
Joins query clauses with a logical NOR returns all documents that fail to match both clauses.
$or
Joins query clauses with a logical OR returns all documents that match the conditions of either clause.
Element
Name
Description
$exists
Matches documents that have the specified field.
$type
Selects documents if a field is of the specified type.
Evaluation
Name
Description
$expr
Allows use of aggregation expressions within the query language.
$jsonSchema
Validate documents against the given JSON Schema.
$mod
Performs a modulo operation on the value of a field and selects documents with a specified result.
$regex
Selects documents where values match a specified regular expression.
$text
Performs text search.
$where
Matches documents that satisfy a JavaScript expression.
Geospatial
Name
Description
$geoIntersects
Selects geometries that intersect with a GeoJSON geometry. The 2dsphere index supports $geoIntersects.
$geoWithin
Selects geometries within a bounding GeoJSON geometry. The 2dsphere and 2d indexes support $geoWithin.
$near
Returns geospatial objects in proximity to a point. Requires a geospatial index. The 2dsphere and 2d indexes support $near.
$nearSphere
Returns geospatial objects in proximity to a point on a sphere. Requires a geospatial index. The 2dsphere and 2d indexes support $nearSphere.
Array
Name
Description
$all
Matches arrays that contain all elements specified in the query.
$elemMatch
Selects documents if element in the array field matches all the specified $elemMatch conditions.
$size
Selects documents if the array field is a specified size.
Bitwise
Name
Description
$bitsAllClear
Matches numeric or binary values in which a set of bit positions all have a value of 0.
$bitsAllSet
Matches numeric or binary values in which a set of bit positions all have a value of 1.
$bitsAnyClear
Matches numeric or binary values in which any bit from a set of bit positions has a value of 0.
$bitsAnySet
Matches numeric or binary values in which any bit from a set of bit positions has a value of 1.
Projection Operators
Name
Description
$
Projects the first element in an array that matches the query condition.
$elemMatch
Projects the first element in an array that matches the specified $elemMatch condition.
$meta
Projects the document's score assigned during $text operation.
$slice
Limits the number of elements projected from an array. Supports skip and limit slices.
Miscellaneous Operators
Name
Description
$comment
Adds a comment to a query predicate.
$rand
Generates a random float between 0 and 1.






############## Aggregation pipeline #######

db.orders.insertMany( [
   { _id: 0, name: "Pepperoni", size: "small", price: 19,
     quantity: 10, date: ISODate( "2021-03-13T08:14:30Z" ) },
   { _id: 1, name: "Pepperoni", size: "medium", price: 20,
     quantity: 20, date : ISODate( "2021-03-13T09:13:24Z" ) },
   { _id: 2, name: "Pepperoni", size: "large", price: 21,
     quantity: 30, date : ISODate( "2021-03-17T09:22:12Z" ) },
   { _id: 3, name: "Cheese", size: "small", price: 12,
     quantity: 15, date : ISODate( "2021-03-13T11:21:39.736Z" ) },
   { _id: 4, name: "Cheese", size: "medium", price: 13,
     quantity:50, date : ISODate( "2022-01-12T21:23:13.331Z" ) },
   { _id: 5, name: "Cheese", size: "large", price: 14,
     quantity: 10, date : ISODate( "2022-01-12T05:08:13Z" ) },
   { _id: 6, name: "Vegan", size: "small", price: 17,
     quantity: 10, date : ISODate( "2021-01-13T05:08:13Z" ) },
   { _id: 7, name: "Vegan", size: "medium", price: 18,
     quantity: 10, date : ISODate( "2021-01-13T05:10:13Z" ) }
] )

db.orders.aggregate( [

   // Stage 1: Filter pizza order documents by pizza size
   {
      $match: { size: "medium" }
   },

   // Stage 2: Group remaining documents by pizza name and calculate total quantity
   {
      $group: { _id: "$name", totalQuantity: { $sum: "$quantity" } }
   }

] )

db.orders.aggregate( [

   // Stage 1: Filter pizza order documents by date range
   {
      $match:
      {
         "date": { $gte: new ISODate( "2020-01-30" ), $lt: new ISODate( "2022-01-30" ) }
      }
   },

   // Stage 2: Group remaining documents by date and calculate results
   {
      $group:
      {
         _id: { $dateToString: { format: "%Y-%m-%d", date: "$date" } },
         totalOrderValue: { $sum: { $multiply: [ "$price", "$quantity" ] } },
         averageOrderQuantity: { $avg: "$quantity" }
      }
   },

   // Stage 3: Sort documents by totalOrderValue in descending order
   {
      $sort: { totalOrderValue: -1 }
   }

 ] )


############ mongoDB Atlas  ##############
- If we using mongoDB Atlas then we don't need to deploy mongDB server on it(machine).
- mongoDB Atlas is mongoDB on the cloud.

