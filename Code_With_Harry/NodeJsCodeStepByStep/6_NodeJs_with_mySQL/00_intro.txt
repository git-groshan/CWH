Using Node.js with MySQL allows you to create applications that interact with a MySQL database. Below is a step-by-step guide on how to set up a Node.js application to interact with a MySQL database.

### Prerequisites

1. **Node.js and npm**: Make sure you have Node.js and npm installed.
2. **MySQL**: Install MySQL on your machine and set up a database.

### Step 1: Install MySQL Module

First, you need to install the `mysql` module, which provides a MySQL client for Node.js.

```bash
npm install mysql
```

### Step 2: Create a Connection to the Database

Create a JavaScript file, e.g., `app.js`, and require the `mysql` module. Then, set up a connection to your MySQL database.

```javascript
const mysql = require('mysql');

// Create a connection to the database
const connection = mysql.createConnection({
  host: 'localhost',
  user: 'your-username',
  password: 'your-password',
  database: 'your-database'
});

// Connect to the database
connection.connect((err) => {
  if (err) {
    console.error('Error connecting to the database:', err);
    return;
  }
  console.log('Connected to the database');
});
```

Replace `'localhost'`, `'your-username'`, `'your-password'`, and `'your-database'` with your actual database credentials.

### Step 3: Perform Database Operations

You can now use the `connection` object to perform various database operations, such as querying data, inserting data, updating data, and deleting data.

#### Query Data

```javascript
// Query data from the database
connection.query('SELECT * FROM your_table', (err, results, fields) => {
  if (err) {
    console.error('Error executing query:', err);
    return;
  }
  console.log('Results:', results);
});
```

#### Insert Data

```javascript
// Insert data into the database
const user = { name: 'John Doe', email: 'john.doe@example.com' };
connection.query('INSERT INTO users SET ?', user, (err, results) => {
  if (err) {
    console.error('Error inserting data:', err);
    return;
  }
  console.log('Data inserted, ID:', results.insertId);
});
```

#### Update Data

```javascript
// Update data in the database
const userId = 1;
const newEmail = 'john.new@example.com';
connection.query('UPDATE users SET email = ? WHERE id = ?', [newEmail, userId], (err, results) => {
  if (err) {
    console.error('Error updating data:', err);
    return;
  }
  console.log('Data updated, affected rows:', results.affectedRows);
});
```

#### Delete Data

```javascript
// Delete data from the database
const userIdToDelete = 1;
connection.query('DELETE FROM users WHERE id = ?', [userIdToDelete], (err, results) => {
  if (err) {
    console.error('Error deleting data:', err);
    return;
  }
  console.log('Data deleted, affected rows:', results.affectedRows);
});
```

### Step 4: Close the Database Connection

After performing your database operations, it is a good practice to close the connection.

```javascript
connection.end((err) => {
  if (err) {
    console.error('Error closing the connection:', err);
    return;
  }
  console.log('Database connection closed');
});
```

### Complete Example

Hereâ€™s a complete example that connects to a MySQL database, performs a query, and then closes the connection.

```javascript
const mysql = require('mysql');

// Create a connection to the database
const connection = mysql.createConnection({
  host: 'localhost',
  user: 'your-username',
  password: 'your-password',
  database: 'your-database'
});

// Connect to the database
connection.connect((err) => {
  if (err) {
    console.error('Error connecting to the database:', err);
    return;
  }
  console.log('Connected to the database');

  // Perform a query
  connection.query('SELECT * FROM your_table', (err, results, fields) => {
    if (err) {
      console.error('Error executing query:', err);
      connection.end();
      return;
    }
    console.log('Results:', results);

    // Close the connection
    connection.end((err) => {
      if (err) {
        console.error('Error closing the connection:', err);
        return;
      }
      console.log('Database connection closed');
    });
  });
});
```

### Using Promises with MySQL

For better asynchronous handling, you can use the `mysql2` package, which supports Promises.

#### Install mysql2

```bash
npm install mysql2
```

#### Using mysql2 with Promises

```javascript
const mysql = require('mysql2/promise');

async function main() {
  const connection = await mysql.createConnection({
    host: 'localhost',
    user: 'your-username',
    password: 'your-password',
    database: 'your-database'
  });

  try {
    const [rows, fields] = await connection.execute('SELECT * FROM your_table');
    console.log('Results:', rows);
  } catch (err) {
    console.error('Error executing query:', err);
  } finally {
    await connection.end();
    console.log('Database connection closed');
  }
}

main();
```

Using `mysql2` with Promises or async/await simplifies error handling and improves readability, especially for complex asynchronous workflows.