The `os` module in Node.js provides a number of operating system-related utility methods and properties. It can be used to get information about the operating system on which the Node.js process is running. This includes details such as the platform, CPU architecture, memory usage, network interfaces, and more.

Here are some common uses and methods provided by the `os` module:

### Loading the `os` Module
First, you need to require the `os` module in your Node.js script:

```javascript
const os = require('os');
```

### Methods and Properties

1. **os.arch()**
   - Returns a string identifying the operating system CPU architecture.

   ```javascript
   console.log(os.arch()); // e.g., 'x64'
   ```

2. **os.platform()**
   - Returns a string identifying the operating system platform.

   ```javascript
   console.log(os.platform()); // e.g., 'linux', 'darwin', 'win32'
   ```

3. **os.type()**
   - Returns the operating system name.

   ```javascript
   console.log(os.type()); // e.g., 'Linux', 'Darwin', 'Windows_NT'
   ```

4. **os.uptime()**
   - Returns the system uptime in seconds.

   ```javascript
   console.log(os.uptime()); // e.g., 123456
   ```

5. **os.totalmem()**
   - Returns the total amount of system memory in bytes.

   ```javascript
   console.log(os.totalmem()); // e.g., 17179869184
   ```

6. **os.freemem()**
   - Returns the amount of free system memory in bytes.

   ```javascript
   console.log(os.freemem()); // e.g., 8589934592
   ```

7. **os.cpus()**
   - Returns an array of objects containing information about each logical CPU core.

   ```javascript
   console.log(os.cpus());
   /*
   [
     {
       model: 'Intel(R) Core(TM) i7-8565U CPU @ 1.80GHz',
       speed: 2112,
       times: { user: 2520200, nice: 0, sys: 303400, idle: 60566400, irq: 0 }
     },
     ...
   ]
   */
   ```

8. **os.networkInterfaces()**
   - Returns an object containing network interfaces that have been assigned a network address.

   ```javascript
   console.log(os.networkInterfaces());
   /*
   {
     lo: [
       {
         address: '127.0.0.1',
         netmask: '255.0.0.0',
         family: 'IPv4',
         mac: '00:00:00:00:00:00',
         internal: true,
         cidr: '127.0.0.1/8'
       },
       ...
     ],
     eth0: [
       {
         address: '192.168.1.100',
         netmask: '255.255.255.0',
         family: 'IPv4',
         mac: '01:23:45:67:89:ab',
         internal: false,
         cidr: '192.168.1.100/24'
       },
       ...
     ]
   }
   */
   ```

9. **os.homedir()**
   - Returns the string path of the current user's home directory.

   ```javascript
   console.log(os.homedir()); // e.g., '/Users/username'
   ```

10. **os.tmpdir()**
    - Returns the string path of the operating system's default directory for temporary files.

    ```javascript
    console.log(os.tmpdir()); // e.g., '/tmp'
    ```

11. **os.hostname()**
    - Returns the hostname of the operating system.

    ```javascript
    console.log(os.hostname()); // e.g., 'my-computer'
    ```

12. **os.release()**
    - Returns the operating system release.

    ```javascript
    console.log(os.release()); // e.g., '20.3.0'
    ```

13. **os.userInfo()**
    - Returns an object containing information about the currently effective user.

    ```javascript
    console.log(os.userInfo());
    /*
    {
      uid: 501,
      gid: 20,
      username: 'username',
      homedir: '/Users/username',
      shell: '/bin/bash'
    }
    */
    ```

### Example Usage

Here's an example that combines several `os` module methods to display system information:

```javascript
const os = require('os');

console.log('Operating System Info:');
console.log(`Type: ${os.type()}`);
console.log(`Platform: ${os.platform()}`);
console.log(`Architecture: ${os.arch()}`);
console.log(`Release: ${os.release()}`);
console.log(`Uptime: ${os.uptime()} seconds`);
console.log(`Total Memory: ${os.totalmem() / (1024 ** 3)} GB`);
console.log(`Free Memory: ${os.freemem() / (1024 ** 3)} GB`);
console.log('CPU Info:', os.cpus());
console.log('Network Interfaces:', os.networkInterfaces());
console.log(`Home Directory: ${os.homedir()}`);
console.log(`Temporary Directory: ${os.tmpdir()}`);
console.log(`Hostname: ${os.hostname()}`);
console.log('User Info:', os.userInfo());
```

### Summary

The `os` module in Node.js is a powerful tool for accessing various operating system-related details, which can be extremely useful for system monitoring, diagnostics, and platform-specific adjustments in your Node.js applications.